postgreSql commands

select * from categories

with recursive categories_a as
(
	select id, name, parent_id from categories c
	where c.id =1
	union all
	select c.id, c.name, c.parent_id from categories c
	inner join categories_a a
	on c.parent_id = a.id
)

select * from categories_a

-----------------------------------------------------

create or replace function FUNC_GETCATEGORYBYHIERARCHY(PARAM_ID INTEGER)
RETURNS TABLE (ID INTEGER, NAME VARCHAR, PARENT_ID INTEGER)
	language plpgsql
as $$
begin
return query
 with recursive categories_a as
(
	select id, name, parent_id from categories c
	where c.id =PARAM_ID
	union all
	select c.id, c.name, c.parent_id from categories c
	inner join categories_a a
	on c.parent_id = a.id
)

select * from categories_a;

end;
$$;

SELECT * FROM FUNC_GETCATEGORYBYHIERARCHY(2);

-----------------------------------------

create or replace procedure ADD_CATEGORY(code integer, name varchar, parent_id integer)
language plpgsql
as $$
declare
begin
insert into categories (code,name,parent_id)values(Code, Name, Parent_id);
end;$$;

-------------------------

create or replace procedure UPDATE_CATEGORY(
	ID integer,
	CODE integer,
	NAME varchar,
	PARENT_ID integer
) 
language plpgsql as $$
declare
begin
update categories set CODE=CODE, NAME=NAME, PARENT_ID= PARENT_ID where ID=ID;
end; $$;

------------------------

create or replace procedure DELETE_CATEGORY(I_ID INTEGER)
language plpgsql as $$
declare
begin
update categories set DELETED = ID where ID=I_ID;
end;$$;

call add_category(2006,'Android',6)

select * from categories
--------------------

-- User table

create table users(
	id serial primary key,
	username varchar(100),
	password varchar(255),
    isActive BOOLEAN DEFAULT TRUE,
	deleted SMALLINT DEFAULT 0 
)

----------------------
create or replace procedure Add_User (
	I_USERNAME varchar,
	I_PASSWORD varchar,
	I_ISACTIVE bool
) language plpgsql as $$
declare
begin
insert into users(username,password,isActive)values(i_username,i_password,i_isActive);
end; $$;
----------------------
create or replace procedure UPADATE_USER (
	I_ID integer,
	I_USERNAME varchar,
	I_PASSWORD varchar,
	I_ISACTIVE bool
) language plpgsql as $$
declare
begin
update users set username = i_username, password = i_password,isActive = i_isactive where ID = i_id;
end; $$;
-------------------
create or replace procedure DELETE_USER (
	I_ID integer
) language plpgsql as $$
declare
begin
update users set deleted = id where ID = i_id;
end; $$;
---------------------